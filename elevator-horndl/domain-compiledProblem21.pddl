(define (domain elevators)
(:requirements :adl :derived-predicates)
(:constants
  pass_g pass_q pass_e pass_o pass_p pass_r pass_a pass_h b c d f i j k l m n s t u)
(:predicates
  (passenger ?p)
  (boarded ?p)
  (served ?p)
  (floor ?p)
  (origin ?p ?f)
  (destin ?p ?f)
  (liftat ?f)
  (next ?f1 ?f2)
  (DATALOG_PASSENGER ?x0)
  (DATALOG_INCONSISTENT)
  (DATALOG_FLOOR ?x0)
  (DATALOG_QUERY0 ?x0 ?x1)
  (AUX0 ?y0 ?y2 ?y1)
  (AUX1 ?y0)
  (AUX2 ?x))
(:derived (DATALOG_QUERY0 ?x0 ?x1)
          (and (boarded ?x1) (destin ?x1 ?x0)))
(:derived (DATALOG_PASSENGER ?x0)
          (or (exists (?y0) (destin ?x0 ?y0)) (exists (?y0) (origin ?x0 ?y0)) (boarded ?x0) (passenger ?x0) (served ?x0)))
(:derived (DATALOG_INCONSISTENT)
          (or (exists (?y0 ?y1 ?y2) (AUX0 ?y0 ?y2 ?y1)) (exists (?y0) (AUX1 ?y0))))
(:derived (DATALOG_FLOOR ?x0)
          (or (exists (?y0) (destin ?y0 ?x0)) (exists (?y0) (origin ?y0 ?x0)) (floor ?x0) (liftat ?x0)))
(:derived (AUX0 ?y0 ?y2 ?y1)
          (and (next ?y0 ?y1) (next ?y0 ?y2) (not (= ?y1 ?y2))))
(:derived (AUX1 ?y0)
          (and (DATALOG_FLOOR ?y0) (DATALOG_PASSENGER ?y0)))
(:derived (AUX2 ?x)
          (or (served ?x) (not (DATALOG_PASSENGER ?x))))
(:action stop
  :parameters (?p ?f)
  :precondition (and (DATALOG_PASSENGER ?p) (liftat ?f) (not (DATALOG_INCONSISTENT)))
  :effect (and (when (and (origin ?p ?f) (not (boarded ?p)) (not (served ?p))) (boarded ?p)) (when (DATALOG_QUERY0 ?f ?p) (and (served ?p) (not (boarded ?p))))))
(:action moveUp
  :parameters (?f1 ?f2)
  :precondition (and (liftat ?f1) (next ?f1 ?f2) (not (DATALOG_INCONSISTENT)))
  :effect (when (and (liftat ?f1) (not (= ?f1 ?f2))) (and (liftat ?f2) (not (liftat ?f1)))))
(:action moveDown
  :parameters (?f1 ?f2)
  :precondition (and (liftat ?f1) (next ?f2 ?f1) (not (DATALOG_INCONSISTENT)))
  :effect (when (and (liftat ?f1) (not (= ?f1 ?f2))) (and (liftat ?f2) (not (liftat ?f1)))))
)