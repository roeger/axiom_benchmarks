(define (domain taskAssigment)
(:requirements :adl :derived-predicates)
(:constants
  a b c d e f g)
(:predicates
  (employee ?x)
  (engineer ?x)
  (designer ?x)
  (developer ?x)
  (electronicengineer ?x)
  (informaticengineer ?x)
  (materialsengineer ?x)
  (taskagent ?x)
  (electronicsagent ?x)
  (softwareagent ?x)
  (designagent ?x)
  (materialsagent ?x)
  (testingagent ?x)
  (codingagent ?x)
  (specificationsagent ?x)
  (fullname ?x)
  (haspersonalinfo ?x ?y)
  (DATALOG_EMPLOYEE ?x0)
  (DATALOG_QUERY0 ?x0 ?x1)
  (DATALOG_TASKAGENT ?x0)
  (DATALOG_ENGINEER ?x0)
  (DATALOG_INCONSISTENT)
  (DATALOG_DESIGNAGENT ?x0)
  (DATALOG_SOFTWAREAGENT ?x0)
  (DATALOG_FULLNAME ?x0)
  (AUX0 ?y0)
  (AUX1 ?y0)
  (AUX2 ?y0)
  (AUX3 ?y0)
  (AUX4 ?y0)
  (AUX5 ?y0)
  (AUX6 ?y0)
  (AUX7 ?y0)
  (AUX8 ?y0)
  (AUX9 ?x2 ?x1 ?x3)
  (AUX10 ?x2 ?x1 ?x3)
  (AUX11)
  (AUX12 ?x ?y))
(:derived (DATALOG_QUERY0 ?x0 ?x1)
          (and (electronicengineer ?x0) (electronicengineer ?x1)))
(:derived (DATALOG_EMPLOYEE ?x0)
          (or (exists (?y0) (haspersonalinfo ?x0 ?y0)) (DATALOG_ENGINEER ?x0) (DATALOG_TASKAGENT ?x0) (designer ?x0) (developer ?x0) (employee ?x0)))
(:derived (DATALOG_TASKAGENT ?x0)
          (or (DATALOG_DESIGNAGENT ?x0) (DATALOG_SOFTWAREAGENT ?x0) (electronicsagent ?x0) (taskagent ?x0) (testingagent ?x0)))
(:derived (DATALOG_ENGINEER ?x0)
          (or (electronicengineer ?x0) (engineer ?x0) (informaticengineer ?x0) (materialsengineer ?x0)))
(:derived (DATALOG_INCONSISTENT)
          (or (exists (?y0) (AUX0 ?y0)) (exists (?y0) (AUX1 ?y0)) (exists (?y0) (AUX2 ?y0)) (exists (?y0) (AUX3 ?y0)) (exists (?y0) (AUX4 ?y0)) (exists (?y0) (AUX5 ?y0)) (exists (?y0) (AUX6 ?y0)) (exists (?y0) (AUX7 ?y0)) (exists (?y0) (AUX8 ?y0))))
(:derived (DATALOG_DESIGNAGENT ?x0)
          (or (designagent ?x0) (materialsagent ?x0)))
(:derived (DATALOG_SOFTWAREAGENT ?x0)
          (or (codingagent ?x0) (softwareagent ?x0) (specificationsagent ?x0)))
(:derived (DATALOG_FULLNAME ?x0)
          (or (exists (?y0) (haspersonalinfo ?y0 ?x0)) (fullname ?x0)))
(:derived (AUX0 ?y0)
          (and (DATALOG_SOFTWAREAGENT ?y0) (materialsengineer ?y0)))
(:derived (AUX1 ?y0)
          (and (developer ?y0) (specificationsagent ?y0)))
(:derived (AUX2 ?y0)
          (and (electronicsagent ?y0) (informaticengineer ?y0)))
(:derived (AUX3 ?y0)
          (and (electronicengineer ?y0) (informaticengineer ?y0)))
(:derived (AUX4 ?y0)
          (and (designer ?y0) (electronicsagent ?y0)))
(:derived (AUX5 ?y0)
          (and (codingagent ?y0) (electronicengineer ?y0)))
(:derived (AUX6 ?y0)
          (and (DATALOG_EMPLOYEE ?y0) (DATALOG_FULLNAME ?y0)))
(:derived (AUX7 ?y0)
          (and (DATALOG_SOFTWAREAGENT ?y0) (designer ?y0)))
(:derived (AUX8 ?y0)
          (and (electronicsagent ?y0) (materialsengineer ?y0)))
(:derived (AUX9 ?x2 ?x1 ?x3)
          (or (= ?x1 ?x2) (= ?x1 ?x3) (= ?x2 ?x3) (not (electronicengineer ?x1)) (not (electronicengineer ?x2)) (not (electronicengineer ?x3))))
(:derived (AUX10 ?x2 ?x1 ?x3)
          (or (= ?x1 ?x2) (= ?x1 ?x3) (= ?x2 ?x3) (not (informaticengineer ?x1)) (not (informaticengineer ?x2)) (not (informaticengineer ?x3))))
(:derived (AUX11)
          (exists (?x ?y) (AUX12 ?x ?y)))
(:derived (AUX12 ?x ?y)
          (and (DATALOG_QUERY0 ?x ?y) (not (= ?x ?y))))
(:action hireElectronicEng
  :parameters (?n)
  :precondition (not (DATALOG_INCONSISTENT))
  :effect (when (forall (?x1 ?x2 ?x3) (AUX9 ?x2 ?x1 ?x3)) (electronicengineer ?n)))
(:action hireInformaticEng
  :parameters (?n)
  :precondition (not (DATALOG_INCONSISTENT))
  :effect (when (forall (?x1 ?x2 ?x3) (AUX10 ?x2 ?x1 ?x3)) (informaticengineer ?n)))
(:action assignTaskAgent
  :parameters (?x)
  :precondition (and (DATALOG_EMPLOYEE ?x) (not (DATALOG_INCONSISTENT)))
  :effect (and (taskagent ?x)))
(:action assignElectronicsAgent
  :parameters (?x)
  :precondition (and (DATALOG_EMPLOYEE ?x) (not (DATALOG_INCONSISTENT)))
  :effect (and (electronicsagent ?x)))
(:action assignSoftwareAgent
  :parameters (?x)
  :precondition (and (DATALOG_EMPLOYEE ?x) (not (DATALOG_INCONSISTENT)))
  :effect (and (softwareagent ?x)))
(:action assignDesignAgent
  :parameters (?x)
  :precondition (and (DATALOG_EMPLOYEE ?x) (not (DATALOG_INCONSISTENT)))
  :effect (and (designagent ?x)))
(:action assignTestingAgent
  :parameters (?x)
  :precondition (and (DATALOG_EMPLOYEE ?x) (not (DATALOG_INCONSISTENT)))
  :effect (and (testingagent ?x)))
(:action assignMaterialsAgent
  :parameters (?x)
  :precondition (and (DATALOG_EMPLOYEE ?x) (not (DATALOG_INCONSISTENT)))
  :effect (and (materialsagent ?x)))
(:action assignCodingAgent
  :parameters (?x)
  :precondition (and (DATALOG_EMPLOYEE ?x) (not (DATALOG_INCONSISTENT)))
  :effect (and (codingagent ?x)))
(:action assignSpecificationsAgent
  :parameters (?x)
  :precondition (and (DATALOG_EMPLOYEE ?x) (not (DATALOG_INCONSISTENT)))
  :effect (and (specificationsagent ?x)))
(:action removePersonalInfo
  :parameters (?x ?y)
  :precondition (and (haspersonalinfo ?x ?y) (not (DATALOG_INCONSISTENT)))
  :effect (and (haspersonalinfo ?x ?y)))
)